.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/support/" }
    Support
  &nbsp;>&nbsp;
  %a{ :href => "/support/troubleshooting/" }
    Troubleshooting
  %hr

%a{:href => "#", :name => "top"}
%h1
  Troubleshooting
%p
  Here we will explore common issues and their resolutions.
%h2
  Before trying any solution below, please:
%ul
  %li
    %strong
      Make sure that you are on the latest gem version (rvm get head).
  %li
    Make sure that the sourcing of the RVM file occurs *last* in your profile files (.bash_profile / .bashrc / .zshrc) essentially after any customizations of PATH / functions or aliases.
    Also, ensure your shell file does not contain "&amp;&amp; return".
  %li
    Be sure to be using either bash or zsh, RVM (latest versions preferred) is untested at best in other shells.

%a{:href => "#", :name => "ruby-debug"}
%h2 ruby-debug and ruby 1.9
%p
  If you have trouble installing ruby-debug19 try installing with the following command:
%pre.code
  :preserve
    $ gem install ruby-debug19 -- --with-ruby-include="${rvm_path}/src/${rvm_env_string//@*}"

%a{:href => "#", :name => "segfault"}
%h2
  Segfaults
%p
  If you see segfaults in 1.8.7 and 1.9.1 (possibly because of 'spec_fetcher.rb' or some other library), note this is a known bug for both ruby versions.
  Please see the ruby-lang.org issue for details:
  %a{:href => "http://redmine.ruby-lang.org/issues/show/2597"}
    http://redmine.ruby-lang.org/issues/show/2597
  If you downgrade to 'rvm install 1.8.7-p174' for now the issue had not been introduced at that point.
  You can set '1.8.7-p174' as the default patchlevel for now in ~/.rvm/config/user which overrides rvm's defaults.
  Please note that on 1.8.7, these bug appears to be gone as of p299.

  set the following in the config file:
  %pre.code
    :preserve
      ruby_1.8.7_patch_level=174

%a{:href => "#", :name => "i386"}
%h2
  i386 (32 bit)
%p
  I need to compile ruby X as i386 (32 bit).
%pre.code
  :preserve
    CFLAGS='-m32' CXXFLAGS='-m32' LDFLAGS='-m32' rvm install X
%p
  Also note you may need to add the following to the start of the line on osx:

%pre.code
  :preserve
    rvm_archflags="-arch i386"

%a{:href => "#", :name => "segfault"}
%h2
  Bus Error / Segfault
%p
  When a command you try to run produces a segfault, possibly like the one below:
%pre.code
  :preserve
    [BUG] cross-thread violation on rb_gc()

%p
  In every case of this I have seen thus far it has always ended up being that a ruby gem/library
  with C extensions was compiled against a different ruby and/or architecture than the one that
  is trying to load it. Try uninstalling &amp; reinstalling gems with C extensions that your
  application uses to hunt this buggar down.

%a{:href => "#", :name => "mysql"}
%h2
  MySQL
%p
  If you are having issues installing MySQL gem for a ruby please visit the
  %a{:href => "/integration/databases/"}
    MySQL page.

%a{:name => "profiles-on-osx"}
%h2 .bashrc not being loaded on OSX

%p
  If your .bashrc file isn't being correctly loaded on OSX, you need to do one of
  two things:

%ul
  %li Add "source ~/.bashrc" to ~/.bash_profile or ~/.profile
  %li
    In your terminal preferences, change the shell from the default
    of /usr/bin/login to /bin/bash.

%a{:href => "#", :name => "passenger"}
%h2
  Passenger
%p
  If you are having issues getting passenger running with an RVM installed ruby, most likely you missed the '.bin/[ruby string]' comment on the
  %a{:href => "/integration/passenger/"}
    passenger page.

%a{:href => "#", :name => "readline"}
%h2
  Readline
%p
  If you have an error when compiling pertaining to readline, please refer to the
  %a{:href => "/packages/readline/"} readline page.

%a{:href => "#", :name => "iconv"}
%h2
  require "iconv" # => false ?!
%p
  If you have issues with iconv not being available in ruby / irb please rever to the
  %a{:href => "/packages/iconv/"} iconv page.

%a{:href => "#", :name => "curl"}
%h2
  curl failing, 'curl is' ?!
%p
  If you see this:
%pre.code
  :preserve
    ++ curl is /opt/local/bin/curl -O -L -s -C - ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.6-p383.tar.gz
    curl: Remote file name has no length!
    curl: try 'curl --help' or 'curl --manual' for more information
%p
  Then maybe you have aliased or symlinked the 'which' command to the 'type' command, revert this and RVM should work.

%a{:href => "#", :name => "pg"}
%h2
  I can't seem to install the pg gem.
%p
  Prepend with a variable assignment for PATH with the location of the pg_config file, for example:
%pre.code
  :preserve
    PATH=/usr/local/bdsm/pkg/postgresql/active/bin:$PATH gem install pg --no-rdoc --no-ri

%a{:href => "#", :name => "cd-completion"}
%h2
  I'm having trouble in Bash with tab completion of cd (and maybe $CDPATH)
%p
  rvm hooks into cd in order to do per-directory checks for '.rvmrc' files. Tab
  completion of directories should still work, but some people have reported
  problems. If tab completion was working
  %em before
  you installed rvm and now it's not, you can enable cd completion from within
  rvm itself.
%p
  Add the following to your ~/.bashrc or ~/.profile (~/.bash_profile) as
  appropriate:
%pre.code
  export rvm_cd_complete_flag=1
%p
  If you have this problem, please report the details of your operating system,
  $BASH_VERSION, the version of bash_completion you're using, etc. to #rvm on
  Freenode or on Github. To be honest, the tab completion for cd in
  bash_completion is far more robust than the code in rvm's cd function, and
  %em should
  still work with rvm. (In fact, it
  %em does
  still work on OSX 10.6 with Bash 3.2 and Bash 4, on OpenBSD 4.7 with Bash
  4 and on Debian 5.0.6 with Bash 3.2. All of those were tested with the
  %a{:href => "http://bash-completion.alioth.debian.org/"}
    most up-to-date bash-completion
  \. If you don't have that, you may want to try it.)
  Nevertheless, some people have reported problems, and the cd completion
  inside rvm has helped them.

%a{:href => "#", :name => "disable-install-doc"}
%h2
  Building an interpreter fails with an error related to RDOC
%p
  Occasionally a build will fail because the build process picks up an an
  existing rdoc in your path. If this happens, you can add a configuration
  option that will prevent the documentation being built during installation:
%pre.code
  rvm install <ruby-version> --disable-install-doc
%p
  Alternatively, you can try installing a newer version of rdoc to the current
  environment. That way, the newer rdoc should be able to handle documentation
  from the more recent version of Ruby that you're installing.
