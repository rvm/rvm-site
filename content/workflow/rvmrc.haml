.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/workflow/" }
    Workflow
  &nbsp;>&nbsp;
  %a{ :href => "/workflow/rvmrc/" }
    rvmrc
  %hr

%h1 rvmrc files
%p
  There are 3 types of rvmrc files, system user and project.
  They are discussed in detail below.

%a{:name => "system"}
%h2 System /etc/rvmrc
%p
  The system rvmrc file is loaded before RVM initializes and before the user's ~/.rvmrc.
  \/etc/rvmrc settings are applied to all users on the system.

%a{:name => "user"}
%h2 User $HOME/.rvmrc
%p
  The users rvmrc file overwrites settings in /etc/rvmrc and is loaded before RVM initializes.
  $HOME/.rvmrc settings are applied only for the user belonging to $HOME.

%h2 System / User rvmrc examples
%p
  Have RVM install rubies when used instead of only displaying a warning and exiting.
%pre.code
  :preserve
    rvm_install_on_use_flag=1
%p
  Have RVM compile using say, 3, compile threads.
%pre.code
  :preserve
    rvm_make_flags="-j 3"

%p
  Have RVM install to a different location (notice that it ends with /rvm).
%pre.code
  :preserve
    rvm_path=/opt/rvm

%p
  Have RVM compile rubies and libraries as x86_64 on *Mac OS X*.
%pre.code
  :preserve
    rvm_archflags="-arch x86_64"
%p
  Similarly for i386 on *Mac OS X*.
%pre.code
  :preserve
    rvm_archflags="-arch i386"

%p
  More examples may be found in ~/.rvm/examples/rvmrc.

%a{:name => "project"}
%h2 Project .rvmrc
%p
  The project .rvmrc file is different than the system & user. System & user rvmrc files are meant for altering the settings and behavior of RVM.
  The project rvmrc files are intended to be used to setup your project's ruby environment when you switch to the project root directory.

%p
  If you are using the latest version of RVM (rvm get head) then you can take advantage of a few new features, namely hooks and the new project specific ‘.rvmrc’ file. (Available in RVM 0.0.85+)
%p
  Let’s say I have my project directory as ~/projects/ and in this directory I have three projects 'projecta', 'projectb', and 'projectc'. Project a runs on jruby, project b runs on ree 1.8.7, and project c runs on 1.9.1. The setup:

%pre.code
  :preserve
    mkdir -p ~/projects/projecta ~/projects/projectb ~/projects/projectc

    echo "rvm jruby@projecta" > ~/projects/projecta/.rvmrc
    echo "rvm ree@projectb" > ~/projects/projectb/.rvmrc
    echo "rvm 1.9.1@projectc" > ~/projects/projectc/.rvmrc

%p
  Then if I type this:

%pre.code
  :preserve
    cd ~/projects/projecta

    [jruby-1.4.0] $ ruby -v

      jruby 1.4.0 (ruby 1.8.7 patchlevel 174) (2009-11-02 69fbfa3) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_15) [x86_64-java]

    [jruby-1.4.0] $ gem env gemdir

      /Users/wayne/.rvm/gems/jruby/1.4.0@projecta

%p
  I will then be running jruby with 'projecta' gemset and we see that the prompt is now prefixed with '[jruby-1.4.0]'.
%p
  Now if we change to project b's directory.

%pre.code
  :preserve
    cd ~/projects/projectb

    [ree-1.8.7-2009.10] $ ruby -v

      ruby 1.8.7 (2009-06-12 patchlevel 174) [i686-darwin10.2.0], MBARI 0x6770, Ruby Enterprise Edition 2009.10

    [ree-1.8.7-2009.10] $ gem env gemdir

      /Users/wayne/.rvm/gems/ree/1.8.7
%p
  We see that we are now running ree with a 'projectb' gemset and we see that the prompt is now prefixed with '[ree-1.8.7-2009.10]'.

%p
  Finally we change to project c's directory.
%pre.code
  :preserve
    cd ~/projects/projectc

    [ruby-1.9.1-p243] (0) $ ruby -v

      ruby 1.9.1p243 (2009-07-16 revision 24175) [i686-darwin10.2.0]

    [ruby-1.9.1-p243] (0) $ ruby -v

      /Users/wayne/.rvm/gems/ruby/1.9.1@projectc
%p
  We see that we are now running ree with a 'projectb' gemset and we see that the prompt is now prefixed with '[ruby-1.9.1-p243]'.

%p
  Note that the project .rvmrc file is actually a shell script and may contain
  any valid shell commands in order for you to initialize your project's
  environment.

%p
  To turn off the project specific rvmrc functionality in your $HOME/.rvmrc set
%pre.code
  :preserve
    rvm_project_rvmrc=0
%p
  To enable switching to default / system when leaving a directory set

%pre.code
  :preserve
    rvm_project_rvmrc_default=1

%h2 Warning
%p
  Do NOT use shell commands in the System and User rvmrc files.
  For example do not put 'rvm ree' or any other such commands in these two rvmrc files.
  They are for setting environment variables only to modify RVM's behavior and settings.


%h1
  Community Resources
%ul
  %li

