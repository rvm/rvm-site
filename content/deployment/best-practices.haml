= breadcrumbs "Deployment", "Best Practices"

%a{:name => "best-practices"}
%h1 Deployment Best Practices

%h4
  Use
%a{:href => "http://bdsm.beginrescueend.com/"}
  BDSM
'deploy' and 'rails' extensions for nicely-integrated RVM deployment.

%h4
  Walkthrough
%p
  When deploying rvm applications with BDSM, there are a few things to keep in mind.
  Please note that all of these are our recommended practices, and are typically
  best setup on a new machine:

%p
  The best way is to create one system-user per application (project), and deploy an isolated
  environment to each user -- preferably with the same shortname as the application.

%p
  Use an RVM gemset for each application (project)
%p
  Also be sure to use a
  %a{:href => "http://rvm.beginrescueend.com/workflow/rvmrc/#project"}
    project .rvmrc
  for each project, for both development and deployment.

%p
  Start by generating a default ~/.bdsmrc
%pre.code
  :preserve
    appuser$ bdsm bdsmrc

%p
  Next, update any settings you may need to change in the ~/.bdsmrc file, such as the
  environment, repository_url and perhaps the branch to deploy from.
%pre.code
  :preserve
    appuser$ vim ~/.bdsmrc

%p
  Now, set the rvm_path to be user-facing.
%pre.code
  :preserve
    appuser$ echo 'rvm_path="$HOME/.rvm"' >> ~/.rvmrc
%p
  Next, run the Rails setup command; this creates and sets up the
  configuration within the ~/shared path, installing rvm with the selected or
  default ruby (currently 1.9.2)
%pre.code
  :preserve
    appuser$ bdsm rails setup

%p
  Generate the unicorn configuration file in ~/shared/config/. Edit this file
  if you wish to run more than 2 unicorn worker processes by default,
  and to tweak any unicorn settings.
%pre.code
  :preserve
    appuser$ bdsm unicorn service setup

%p
  Edit the default generated database.yml file, and setup your db connection
  information.
%pre.code
  :preserve
    appuser$ vim ~/shared/config/database.yml

%p
  Update ~/current with a fresh release, using the latest code from the defined
  repository and branch.
%pre.code
  :preserve
    appuser$ bdsm deploy

%p
  If you use rvm gemset files, do the following
%pre.code
  :preserve
    appuser$ source ~/.bash_profile # load RVM into your current shell
    appuser$ rvm gemset import ~/current/production.gems

%p
  If you use bundler, bootstrap your gems as follows
  ( Note: ensure that 'gem "unicorn"' is in the Gemfile first,
  *with no version specified* )
%pre.code
  :preserve
    appuser$ cd ~/current
    appuser$ gem install bundler && bundle install

%p
  Once your Ruby app environment is bootstrapped, start
  your application running under unicorn,
%pre.code
  :preserve
    appuser$ bdsm unicorn start

%p
  If there are any issues starting up the application, you'll be notified
  by the Unicorn extension, and you can find more details by looking
  in the unicorn error log
%pre.code
  :preserve
    tail -n 100 ~/shared/log/unicorn.stderr.log

%p
  If you run Nginx (like I do), proceed as follows. Please note that
  you'll switch here to running as root :)
%pre.code
  :preserve
    root# bdsm nginx package install

%p
  Now, 'configure the system' - which means copying the Nginx configuration
  directory into /etc/nginx
%pre.code
  :preserve
    root# bdsm nginx configure system

%p
  Next, for each application user, you'll generate an application server
  configuration file (in /etc/nginx/servers/)
%pre.code
  :preserve
    root# bdsm nginx server add {{appuser}}

%p
  Note: this creates a /etc/nginx/servers/appuser.conf file, configured by default to proxy
  to a unicorn running on a Unix Domain Socket (UDS).
%p
  Now, ensure their directory is readable by Nginx
%pre.code
  :preserve
    root# chmod go+rx /home/{{appuser}}

%p
  Finally, startup the Nginx service
%pre.code
  :preserve
    root# bdsm nginx service start

%p
  %em Do not forget backups
  , too many people do...
  The Rails extension comes with a backup_database action.
  This will backup the database based on the database.yml file into the
  \~/shared/backups/ directory.
  (If you want them in a different location, use filesystem symlinks.)
%pre.code
  :preserve
    user$ bdsm rails backup_database

%p
  Stick it in cron, to make sure it happens nightly at 02:00,
%pre.code
  :preserve
    user$ crontab -e

    0 2 * * * bdsm rails backup_database
%p
  Note: this will soon change to 'bdsm rails backup database' (note the space)
%p
  Use wrapper scripts for managing things like god, unicorns and the like.
  %pre.code
    :preserve
      user$ rvm help wrapper

