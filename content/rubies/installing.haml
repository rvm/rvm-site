---
title: "'./install' - Installing RVM."
---

.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/rubies/" }
    Rubies
  &nbsp;>&nbsp;
  %a{ :href => "/rubies/installing/" }
    Installing
  %hr

%h1
  Installing Rubies

%p
  Official ruby interpreter releases that are supported by RVM can be installed using any of the below methods.
%h2
  Known Rubies (Interpreters)
%p
  RVM maintains a list of interpreters and versions thereof to which it may install.
  In order to see this list run the following command.
%pre.code
  :preserve
    $ rvm list known
%p
  Please note that RVM is not limited to simply this list.

%h2 Automatic dependencies installation

%p
  When installing rubies, RVM might need to use sudo to install dependencies. Make sure that user, who calls RVM commands, have sudo rights.
%p
  If you want to be able to run RVM commands by the user who does not have sudo rights, you would need to turn off automatic dependency installation:
%pre.code
  rvm autolibs disable
%p
  It would mean though, that you have to manage dependencies manually.

%h2
  Quick Install
%p
  Install ruby (follow the instructions):
  = sh_cmd "rvm install 2.1.1"

You can also:

%ul.square
  %li
    watch the most accurate (but not official)
    %a{:href => "https://www.youtube.com/watch?v=cQVb7fHFjSM", :target=>"_blank"}
      rvm screencast
  %li
    starting with Rails? watch the
    %a{:href => "http://railscasts.com/episodes/310-getting-started-with-rails", :target=>"_blank"}
      RailsCasts.com on Getting Started with Rails

%h2#scripting Automated installation
%p
  RVM allows two basic modes of operation interactive and non interactive.
  In interactive mode RVM is sourced as a function and is intended to interact with environment.
  In non interactive mode RVM is only added to PATH and can not interact with the environment.
  Because the interactive mode is intended mostly for use by users it also will display additional
  information and dialogs. To avoid this do not source rvm as a function or fallback to using binary
  with one of the following methods:
  = sh_cmd "/full/path/to/rvm/bin/rvm install 2.1.1"
  OR:
  = sh_cmd "command rvm install 2.1.1"

%h2#patchlevel Patch Levels
%p
  Installing specific ruby patch levels (official releases)
  %a{ :name => "patchlevel" }
  %h1
    Patch Levels with RVM
  %p
    For each C-based interpreter, you can also specify a patchlevel using the '-l' or '--level' options.
    Each interpreter defaults to the latest patchlevel known to RVM.
    For example, RVM (as of this writing) defaults ruby 1.8.7 to patchlevel 352.
    If you wanted to switch to patchlevel 160 to test something out you can easily do that by:

  %pre.code
    :preserve
      $ rvm install 2.1.1

      Installing Ruby from source to: ...

      $ ruby -v

      ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-darwin12.0]
  %p
    which will download, compile and install ruby-2.1.1 and then set it to current.
    Switching between patchlevels is very easy:
  %pre.code
    :preserve
      $ rvm ruby-2.0.0-p451

      Switching to ruby 2.0.0-p451 ...

      $ rvm ruby-2.0.0-p481

      Switching to ruby 2.0.0-p481 ...

  %p
    Don't forget about the shorthand due to defaults. The above is equivalent to
  %pre.code
    :preserve
      $ rvm 2.0.0-p451    # same as: rvm ruby-2.0.0-p451
      $ rvm 2.0.0-p481    # same as: rvm ruby-2.0.0-p481

%h2 Getting the Latest and Greatest
%p
  You can get the head/trunk version of any given ruby as follows.
%p
  For any interpreter which has '-head' support, postfix '-head' after the
  interpreter name. For example, in order to install the latest development
  trunk for ruby 2.1:
%pre.code
  :preserve
    $ rvm install ruby-2.1-head
    $ rvm use ruby-2.1-head

%h1 Install on Use
%p
  If you would like RVM to automatically install a ruby when you
  %em use
  it, add the following flag to your rvmrc file:
%pre.code
  :preserve
    $ cat $HOME/.rvmrc
    rvm_install_on_use_flag=1

%h1 Configure flags
%p
  Configure script flags can be passed by a comma-separated list with no spaces after -C, like so:
%pre.code
  :preserve
    $ rvm install 2.1.1 -C --enable-shared,--with-readline-dir=$HOME/.rvm/usr

%h1 Compile Flags
%p
  If you need to pass compile flags for the compile process, just set the
  corresponding environment variables.
%p
  As an example, to enable gdb for ruby 2.1.1:
%pre.code
  :preserve
    $ export optflags="-O0 -ggdb"
    $ rvm install 2.1.1

%h1
  Static MRI
%p
  If you wish to compile an MRI Ruby (1.9/2.0/2.1) as statically-linked instead
  of dynamically, then pass the --static flag like so:

%pre.code
  :preserve
    $ rvm --static install 2.1.1

%h1
  Generating Documentation
%p
  In order to conserve space, RVM does not automatically generate and install
  each Ruby's ri / rdoc documentation. To generate this documentation for Ruby
  please execute the following command:

%pre.code
  :preserve
    $ rvm docs generate all

%p
  Please note that this requires the extracted source for the currently selected
  Ruby version be on the system ($rvm_path/src/<ruby_version>) so the best time
  to execute this command is immediately after installation of that version.

%p
  Provided you have not cleaned up the extracted sources for all currently
  installed Rubies by executing 'rvm cleanup all' then you can install the docs
  for all currently installed Rubies by executing:

%pre.code
  :preserve
    $ rvm all do rvm docs generate all

%p
  If you have executed a cleanup, unfortunately, this means to regenerate the
  documentation you would need to run, for example,:

%pre.code
  :preserve
    $ rvm reinstall 2.1.1 && rvm docs generate all
%p
  As always, don't forget to pass whatever additional parameters such as --patch
  to the reinstall portion of the command that you initially used, if any.

%p
  For more information, please see
%pre.code
  :preserve
    $ rvm help docs
