.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/rubies/" }
    Rubies
  &nbsp;>&nbsp;
  %a{ :href => "/rubies/install/" }
    Installing
  %hr

%h1
  Installing Rubies

%p
  Official ruby interpreter releases that are supported by RVM can be installed using any of the below methods.
%h2
  Known Rubies (Interpreters)
%p
  RVM maintains a list of interpreters and versions thereof to which it may install.
  In order to see this list run the following command.
%pre.code
  :preserve
    $ rvm list known
%p
  Please note that RVM is not limited to simply this list.

%h2 Patch Levels
%p
  Installing specific ruby patch levels (official releases)
  %a{ :name => "patchlevel" }
  %h1
    Patch Levels with RVM
  %p
    For each C-based interpreter, you can also specify a patchlevel using the '-l' or '--level' options.
    Each interpreter defaults to the latest patchlevel known to RVM.
    For example, RVM (as of this writing) defaults ruby 1.8.7 to patchlevel 352.
    If you wanted to switch to patchlevel 160 to test something out you can easily do that by:

  %pre.code
    :preserve
      $ rvm  install ruby-1.8.7-p160

      Installing Ruby from source to: ...

      $ ruby -v

      ruby 1.8.7 (2009-04-08 patchlevel 160) [i686-darwin9.8.0]
  %p
    which will download, compile and install ruby-1.8.7-p160 and then set it to current.
    Switching between patchlevels is very easy:
  %pre.code
    :preserve
      $ rvm  ruby-1.8.7-p160

      Switching to ruby 1.8.7 160 ...

      $ ruby -v

      ruby 1.8.7 (2009-04-08 patchlevel 160) [i686-darwin9.8.0]

      $ rvm  ruby-1.8.7-p352

      Switching to ruby 1.8.7 174 ...

      $ ruby -v

      ruby 1.8.7 (2009-06-12 patchlevel 174) [i686-darwin9.8.0]
  %p
    Don't forget about the shorthand due to defaults. The above is equivalent to
  %pre.code
    :preserve
      $ rvm 1.8.7-p160    # same as: rvm ruby-1.8.7-p160
      $ rvm 1.8.7-p352    # same as: rvm ruby-1.8.7-p352

%h2
  Repository Revisions (MRI)
%p
  Installing specific ruby repository revisions

  %h1
    Specifying repository revisions
  %p
    Moving beyond official patch levels and tags we can also use any arbitrary revision for 1.8.X and 1.9.X
  %pre.code
    :preserve
      $ rvm install 1.8.6-r24700 ;  rvm 1.8.6-r24700

      $ ruby -v

      ruby 1.8.6 (2009-08-26 patchlevel 387) [i686-darwin10.0.0]

      $ which ruby

      /Users/wayne/.rvm/ruby-1.8.6-24700/bin/ruby


%h2 Tags (MRI)
%p
  Installing specific ruby tags
  %h1
    Repository Tags (MRI)
  %p
    To install a specific tagged version of ruby from the repository we specify -t(tag name).
  %pre.code
    :preserve
      $ rvm install 1.8.6-tv1_8_6_111 ; rvm 1.8.6-tv1_8_6_111

      $ which ruby

      /Users/wayne/.rvm/ruby-1.8.6-v1_8_6_111/bin/ruby

%p
  A list of all valid tags can be found in the ruby repository: http://svn.ruby-lang.org/repos/ruby/tags/

%h2 Branches (MRI)
%p
  Installing specific ruby branches
  %h1
    Repository Branches (MRI)
  %p
    To install a specific branch version of ruby from the repository we specify --branch (branch name).
  %pre.code
    :preserve
      $ rvm install ruby-head --branch ruby_1_8 ; rvm ruby-head

      $ ruby -v

      ruby 1.8.8dev (2011-05-25) [i386-darwin10.7.0]

%p
  You'll find a list of all valid branches in the ruby repository: http://svn.ruby-lang.org/repos/ruby/branches/

%h2 Custom Patches (MRI)
%p
  Installing specific rubies with custom ruby source patches
  %pre.code
    :preserve
      $ rvm install 1.8.6 --patch /path/to/awesome.patch
  %p
    Alternatively you can specify more than one patch; they are applied in the order given.
  %pre.code
    :preserve
      $ rvm install 1.8.6 --patch /path/to/awesome.patch,/path/to/another.patch

%h2 Getting the Latest and Greatest
%p
  You can get the head/trunk version of any given ruby as follows.
%p
  For any interpreter which has '-head' support, postfix '-head' after the
  interpreter name. For example, in order to install the latest development
  trunk for ruby 1.9.2:
%pre.code
  :preserve
    $ rvm install ruby-1.9.2-head
    $ rvm use ruby-1.9.2-head

%h1 Install on Use
%p
  If you would like RVM to automatically install a ruby when you
  %em use
  it, add the following flag to your rvmrc file:
%pre.code
  :preserve
    $ cat $HOME/.rvmrc
    rvm_install_on_use_flag=1

%h1 Configure flags
%p
  Configure script flags can be passed by a comma-separated list with no spaces after -C, like so:
%pre.code
  :preserve
    $ rvm install 1.9.1 -C --enable-shared,--with-readline-dir=$HOME/.rvm/usr

%h1 Compile Flags
%p
  If you need to pass compile flags for the compile process, just set the
  corresponding environment variables.
%p
  As an example, to enable gdb for ruby 1.9.1:
%pre.code
  :preserve
    $ export optflags="-O0 -ggdb" rvm install 1.9.1

%h1
  Static MRI
%p
  If you wish to compile an MRI Ruby (1.8 / 1.9) as statically-linked instead
  of dynamically, then pass the --static flag like so:

%pre.code
  :preserve
    $ rvm --static install 1.9.2

