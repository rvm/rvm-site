= breadcrumbs "Integration", "Passenger"

%a{ :name => "passenger" }
%h1
  Using RVM rubies with Passenger
%p
  RVM will allow you to use any of it's MRI/YARV rubies with passenger very easily.

%h1
  Passenger
%p
  Passenger is essentially 'mod_ruby' for both Nginx and Apache.
  You may select *exactly one* Ruby to run all of your Passenger Ruby applications with.
  If you need to run more than one Ruby interpreter then you should choose the most common one as Passenger Ruby.
  You then use proxy pass to external application servers such as Passenger Standalone, Unicorn, Thin, Mongrel, Mongrel2, etc... in order to accomplish running different applications under different rubies.
  For a full explanation of this (with pretty pictures!) see the
  %a{:href => "http://blog.phusion.nl/2010/09/21/phusion-passenger-running-multiple-ruby-versions/"}
    post on Phusion's Blog

%h1
  Passenger *3*

%h2
  Installing Nginx/Apache with Passenger
%p
  First of all there's passenger-install-apache2-module and passenger-install-nginx-module. At the end of the installation it outputs a PassengerRuby configuration snippet for the web server. Its value is set to the RVM Ruby wrapper script that corresponds with the RVM Ruby and RVM gemset that was used to run the installer. This should be all you need for configuration of Passenger 3!

%p
  If it's not, here's what you might have to do, almost all of this stolen from
  %a{:href => "http://blog.ninjahideout.com/posts/the-path-to-better-rvm-and-passenger-integration"} Darcy's Blog Post

%p  In your .rvmrc do:

%pre.code
  :preserve
    if [[ -s "/Users/sutto/.rvm/environments/ree-1.8.7-2010.02@my-app-name" ]] ; then
      . "/Users/sutto/.rvm/environments/ree-1.8.7-2010.02@my-app-name"
    else
      rvm --create use  "ree-1.8.7-2010.02@my-app-name"
    fi

%p Or instead of creating a .rvmrc file use one of the new formats like .ruby-version or .versions.conf:

%pre.code
  :preserve
    echo 1.9.3@my-app-name > .ruby-version

%p Then in the rails project, add a new file config/setup_load_paths.rb and add

%pre.code
  :preserve
    if ENV['MY_RUBY_HOME'] && ENV['MY_RUBY_HOME'].include?('rvm')
      begin
        rvm_path     = File.dirname(File.dirname(ENV['MY_RUBY_HOME']))
        rvm_lib_path = File.join(rvm_path, 'lib')
        $LOAD_PATH.unshift rvm_lib_path
        require 'rvm'
        RVM.use_from_path! File.dirname(File.dirname(__FILE__))
      rescue LoadError
        # RVM is unavailable at this point.
        raise "RVM ruby lib is currently unavailable."
      end
    end

    # Pick the lines for your version of Bundler
    # If you're not using Bundler at all, remove all of them

    # Require Bundler 1.0 
    ENV['BUNDLE_GEMFILE'] = File.expand_path('../Gemfile', File.dirname(__FILE__))
    require 'bundler/setup'

    # Require Bundler 0/9
    # if File.exist?(".bundle/environment.rb")
    #   require '.bundle/environment'
    # else
    #   require 'rubygems'
    #   require 'bundler'
    #   Bundler.setup
    # end

%p
  Please note that for Passenger 3 you now use the ruby wrapper script directly with no need to use the passenger_ruby wrapper.

%h2
  Starting Passenger Standalone
%p
  Then there's Passenger Standalone, i.e. 'passenger start'. Passenger Standalone uses Nginx internally, and it writes a passenger_ruby directive to the Nginx configuration file. This directive points to the RVM Ruby wrapper script that corresponds with the RVM Ruby and RVM gemset that was used to run the 'passenger start' command.

%h2
  Bundler Gotcha
%p
  When using Bundler in your project, Passenger will try to be smart and only add to your $LOAD_PATH the gems listed in your Gemfile. This can lead to "unable to load" errors for your unlisted gems (this should only happen during development). You can check your run-time load path by adding

%pre.code
  :preserve
    f = File.open('/tmp/load_path', 'w')
    f.write($:)
    f.close

%p
  to your app's main file (before the "require" calls). You won't be able to load any gems that are not in that load path.

%h1
  Passenger *2* with RVM

%h3
  Select a Passenger Ruby and Generate Wrapper Scripts
%p
  Run RVM using your desired Ruby interpreter, and pass the '--passenger' option.  This will generate wrapper scripts in RVM's bin directory (see Notes below).
  These wrapper scripts ensure environment variables such as GEM_HOME and GEM_PATH are set correctly for
  applications run by passenger. E.g:

%pre.code
  :preserve
    rvm ree --passenger

%p
  Alternatively, you can use the rvm wrapper command directly:

%pre.code
  :preserve
    rvm wrapper ree@ninjas passenger

%h3
  Install Passenger
%pre.code
  :preserve
    rvm ree
    gem install passenger
    rvmsudo passenger-install-nginx-module
%p
  Or if you are forced to use the tomahawk,
%pre.code
  :preserve
    rvmsudo passenger-install-apache2-module

%h3
  Configure the Web Server
%p
  For Nginx users, replace the passenger_ruby line with:

%pre.code
  :preserve
    passenger_ruby /home/wayne/.rvm/bin/passenger_ruby;
%p
  For apache users, use:

%pre.code
  :preserve
    PassengerRuby /home/wayne/.rvm/bin/passenger_ruby

%p
  Please note that if you installed rvm as root / are using a system wide ruby, instead of using
  \/home/wayne/.rvm/bin/passenger_ruby as in the above examples, you'll instead need to use
  \/usr/local/rvm/bin/passenger_ruby.

%h2 Notes
%ul
  %li
    Add the passenger default user (PassengerDefaultUser/passenger_default_user) to the rvm group. On some systems this is 'www-data' and on others it might be 'http' or 'www'. One telling sign that you forgot to do this would be spending the better part of a day trying to figure out bizarre fork-bomb-like symptoms on passenger spawn (::grin::).

  %li
    Do no not forget to configure the production environment and/or to set the rails_env/RailsEnv variable to development into nginx.conf/httpd.conf for the virtual server config block.
    The RAILS_ENV defaults to 'production'.
  %li
    Be sure to change '/home/wayne' in the above examples to your own $HOME directory,
  %li
    The '.rvm/bin/passenger_ruby' is actually what is known as a 'wrapper script' which sets up the environment for the passenger so that it can find it's gems, etc... and then executes the actual ruby binary."
  %li
    passenger_root/PassengerRoot Should be something similar to the following, which
    is for Passenger 2.2.11 installed under ree-1.8.7-2010.01.
    %pre.code
      :preserve
         passenger_root /home/millisami/.rvm/gems/ree-1.8.7-2010.01/gems/passenger-2.2.11
%h2
  Troubleshooting
%ul
  %li
    The most common issue is forgetting the /bin/ part of the path to get the proper wrapper script:
  %li
    The next most common issue is listening to the output of the passenger installation script with
    respect to where passenger_ruby/PassengerRuby are located. Be sure to use the wrapper script location
    as specified above. To be more clear, see the example below for Nginx config:
    %pre.code
      :preserve
        passenger_ruby /home/wayne/.rvm/bin/passenger_ruby;
        * NOTICE THE '.rvm/bin' DIR  ^ ^ ^
        * do NOT use the actual ruby binary in .rvm/rubies/{passenger_ruby}/bin/ruby
        * do not listen to passenger's output for passenger_ruby as passenger is not aware of rvm.

    For system wide (root) installs the bin directory is /usr/local/rvm/bin instead:
    %pre.code
      :preserve
        passenger_ruby /usr/local/rvm/bin/passenger_ruby;

%h2
  FAQ
%ul
  %li
    %p
      %strong Q: Can I run multiple projects under passenger with each project on a different ruby version?
    %p
      A: Not at this time. Passenger currently only supports running it's projects under *one* ruby.
      You can get this behavior using a proxy pass.
  %li
    %p
      %strong Q: How do I use custom gemsets under passenger?
    %p
      A: Without bundler you can either set environment variables yourself in your config.ru like:
    %pre.code
      :preserve
        ENV["GEM_HOME"]=%x{"source ~/.bash_profile ; rvm ree@pancake ; rvm gemdir"}.strip
    %p
      Or, if you are already using rvmrc's, you can use the rvm ruby api and config/setup_load_paths.rb
      in recent passenger versions by following the guide
      %a{:href => "http://blog.ninjahideout.com/posts/the-path-to-better-rvm-and-passenger-integration"} located here.
    %p
      A: With bundler: Install bundler outside any gemset, switch back to the gemset you wish to use and run
      %tt bundle install
      and restart the application (by touching tmp/restart.txt). This works becase bundler stores absolute paths inside
      %tt .bundle/environment.rb
      which will be loaded by bundler directly.
      If this doesn't work as expected, try running bundle install like so:
    %pre.code
      :preserve
        bundle install $BUNDLE_PATH
    %p
      How can I use commands like passenger-status in conjunction with a user install but run them as root?
      Mainly the key to this is to use wildcards in the sudoers file as the following examples show.
      %pre.code
        :preserve
          /usr/bin/env GEM_PATH=* GEM_HOME=* PATH=* passenger-status

%h2
  Community Resources
%ul
  %li
    %a{:href => "http://blog.phusion.nl/2010/09/21/phusion-passenger-running-multiple-ruby-versions/"}
      Phusion blog post on Passenger 3
  %li
    %a{:href => "http://blog.ninjahideout.com/posts/the-path-to-better-rvm-and-passenger-integration"}
      Darcy's RSOC post on Passenger 2 + RVM Gemsets
