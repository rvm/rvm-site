= breadcrumbs "Integration", "Bundler"

%h1 Bundler

%p
  There is no need to do anything to make bundler work with RVM, but there
  is one thing about bundler that makes it harder to use. By default, bundler
  does not generate wrappers for gem binaries. To make use of the proper version 
  of a gem binary, users are forced to prefix every command with `bundle exec`.
  This makes working in the console rather painful. Fortunately, there are solutions 
  that allow us to just write binary names; the binary from 'gem' specified in the
  Gemfile will be used.

%h2 RVM hook

%p
  Thanks to Rick DeNatale, we now have a hook that automatically will append
  BUNDLE_BIN path to the PATH when changing directories.

%p
  Enabling hook
  %pre.code
    :preserve
      rvm get head && rvm reload
      chmod +x $rvm_path/hooks/after_cd_bundler

%p
  Generating bundler stubs (binaries wrappers)
  %pre.code
    :preserve
      cd /path/to/project
      bundle install --binstubs=./bundler_stubs

%p
  From now on, any project which was generated this way will automatically
  add ./bundler_stubs to the PATH.

%h2 rubygems-bundler gem

%p
  Another solution for this problem is a gem which makes bundler and rubygems
  generate binary wrappers that are aware of bundler. It was discussed with
  the rubygems and bundler teams, however,they did not really like the solution.
  Be forewarned, they will most likely not support it.

%p
  Installation:
  %pre.code
    :preserve
      gem install rubygems-bundler

%p
  And follow onscreen instructions, for more information visit
  %a{:href => "https://github.com/mpapis/rubygems-bundler"}
    rubygems-bundler @ github

%p
  To make it fully working, bundler 1.1 is required (which is not yet released).
  Fortunately, the rubygems plugins enabled bundler is also available for
  installation:
  %pre.code
    :preserve
      gem install mpapis-bundler

%p
  As `mpapis-bundler` already depends on `rubygems-bundler` you could skip the
  previous step. `mpapis-bundler` uses only code that is already in the commit
  tree of bundler, so you do not have to worry about compatibility.

%h2
  Community Resources
%ul
  %li
    You can read bundler's README at
    %a{:href => "http://github.com/carlhuda/bundler"}
      GitHub
