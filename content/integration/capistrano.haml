= breadcrumbs "Integration", "Capistrano"

%h1#capistrano
  Using RVM rubies with Capistrano
%p
  You currently have four options (from newest to oldest):
%ul(style="list-style: decimal")
  %li
    %a(href="#gem") gem:
    If your rvm version on the server and locally are recent enough
    (>= 1.11.3), you can use the
    %code.code rvm-capistrano
    gem.
  %li
    %a(href="#old-plugin") plugin:
    If your rvm version is slightly older but still >= 1.0.1,
    you can use a capistrano plugin (N.B.
    %em not
    gem)
    which ships inside rvm itself.
  %li
    %a(href="#environment") environment:
    Use the capistrano
    %code.code :default_environment
    setting.
  %li
    Enable
    %code.code .ssh
    environment variables using the
    %code.code PermitUserEnvironment
    option in your ssh configuration file.
    Unfortunately this is not yet documented.

%p
  The first (gem) option is preferred as it reduces configuration and
  does not contain hardcoded paths. Please note that RVM
  %strong will not
  be automatically loaded as a shell function but it will be available as a
  binary in
  %code.code PATH
  (for differences between the two versions, please see
  %a(href="/workflow/scripting/") our scripting page
  for further clarification).

%h2#gem Integration via the rvm-capistrano gem

%p#plugin
  Starting with RVM 1.11.3, Capistrano integration was extracted to a
  separate gem, called
  %code.code rvm-capistrano
  \.
  However, there were bugs prior to version 1.1.0 of this gem, so
  %strong you should make sure you are using >= 1.1.0.
%p
  Installation:

%pre.code
  :preserve
    gem install rvm-capistrano

%p
  Or add to Gemfile:

%pre.code
  :preserve
    gem 'rvm-capistrano'

%p
  Example
  %code.code Capfile
  /
  %code.code deploy.rb
  \:

%pre.code
  :preserve
    set :rvm_ruby_string, 'ree@rails3'                     # Or:
    #set :rvm_ruby_string, ENV['GEM_HOME'].gsub(/.*\//,"") # Read from local system

    require "rvm/capistrano"                               # Load RVM's capistrano plugin.

%p
  Please note that this defaults to using a user installation of rvm.
  If you wish to instead set it to use an system wide (root) install,
  add the following to your
  %code.code Capfile
  /
  %code.code deploy.rb
  \:

%pre.code
  :preserve
    set :rvm_type, :system  # Copy the exact line. I really mean :system here

%h3#automatic_installation Automatically installing RVM / Ruby (starting with rvm 1.11.0)

%h4#install_rvm
  Automatically installing RVM on server

%p
  Add the following to your
  %code.code Capfile
  /
  %code.code deploy.rb
  \:

%pre.code
  :preserve
    before 'deploy:setup', 'rvm:install_rvm'

%p
  and additionally if you prefer to update rvm on every installation:

%pre.code
  :preserve
     before 'deploy', 'rvm:install_rvm'

%p
  You can control if development / stable(default) version of RVM is installed with:

%pre.code
  :preserve
    set :rvm_install_type, :head # or:
    #set :rvm_install_type, :stable

%h4#install_ruby
  Automatically installing Ruby on the server via RVM

%p
  Add the following to your
  %code.code Capfile
  /
  %code.code deploy.rb
  \:

%pre.code
  :preserve
    before 'deploy:setup', 'rvm:install_ruby'

%p
  or if you prefer to try to install on every deployment:

%pre.code
  :preserve
    before 'deploy', 'rvm:install_ruby'

%p
  You can control if ruby is only installed if needed(default) or always reinstalled with:

%pre.code
  :preserve
    set :rvm_install_ruby, :install # or:
    #set :rvm_install_ruby, :reinstall

%p
  By default ruby will be installed using all CPU cores, you can control this with:

%pre.code
  :preserve
    set :rvm_install_ruby_threads, 4

%p
  You can control shell selected for installing RVM / Ruby, by default it is Bash:

%pre.code
  :preserve
    set :rvm_install_shell, :zsh

%h3#resources Important resources

%ul.square
  %li
    %a{:href => "https://github.com/mpapis/ad"} Example application
    we tested deployment on it.
  %li
    %a{:href => "/workflow/projects/#ruby-versions"} New project files
    not requiring trusting.

%h2#old-plugin Integration via the rvm capistrano plugin (old way)

%p
  Starting with 1.0.1, RVM includes a built-in plugin (N.B.
  %em not
  a gem) for capistrano support.  This is used in a near-identical way to
  %a(href="#gem") the gem approach above, except that an extra line
  is required to add RVM's lib directory to the load path so that
  the plugin can be found:

%pre.code
  :preserve
    set :rvm_ruby_string, 'ree@rails3'                     # Or:
    #set :rvm_ruby_string, ENV['GEM_HOME'].gsub(/.*\//,"") # Read from local system

    $:.unshift(File.expand_path('./lib', ENV['rvm_path'])) # Add RVM's lib directory to the load path.
    require "rvm/capistrano"                               # Load RVM's capistrano plugin.

%p
  Please note that this plugin defaults to using a
  %em system
  installation of rvm, which is the exact opposite to the gem's
  default installation mode.
  If you wish to instead set it to use a per-user (non-root) install,
  add the following to your
  %code.code Capfile
  /
  %code.code deploy.rb
  \:

%pre.code
  :preserve
    set :rvm_type, :user  # Copy the exact line. I really mean :user here

%h2#environment Integration via :default_environment (hardcore)

%p
  For this option, add the following line in your
  %code.code deploy.rb
  file, adjusting to your particular rvm ruby of course:
%pre.code
  :preserve
    set :default_environment, {
      'PATH' => "/path/to/.rvm/gems/ree/1.8.7/bin:/path/to/.rvm/bin:/path/to/.rvm/ree-1.8.7-2009.10/bin:$PATH",
      'RUBY_VERSION' => 'ruby 1.8.7',
      'GEM_HOME'     => '/path/to/.rvm/gems/ree-1.8.7-2010.01',
      'GEM_PATH'     => '/path/to/.rvm/gems/ree-1.8.7-2010.01',
      'BUNDLE_PATH'  => '/path/to/.rvm/gems/ree-1.8.7-2010.01'  # If you are using bundler.
    }
%p
  To get the accurate locations have a look inside
  %code.code ~/.rvm/config/default
%p
  Also, in order to have capistrano automatically trust project
  %code.code rvmrc
  files on deployments, you can do the following.
  In your
  %code.code config/deploy.rb
  you can add:
  %pre.code
    :preserve
      namespace :rvm do
        task :trust_rvmrc do
          run \"rvm rvmrc trust \#\{release_path\}\"
        end
      end
%p
  And then use capistrano's hooks capabilities, by adding an
  %code.code after
  hook like the following:
  %pre.code
    :preserve
      after "deploy", "rvm:trust_rvmrc"
%p
  to launch it.
