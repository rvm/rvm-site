= breadcrumbs "Integration", "init.d Services"

%a{:name => "sketchup"}
%h1 Using RVM and Ruby-based services that start via init.d

%p
  To use any Ruby application that needs to be started with init.d (e.g., god, unicorn, thin) with
  RVM, you need to generate a wrapper script. Namely, you need to set it up
  so that there is an alternative executable that loads the correct gemset.

%p
  As an example, if you'd installed god under Ruby Enterprise Edition in the
  management gemset (aka. "ree@management"), you would do the following:

%pre.code
  :preserve
    rvm wrapper ree@management bootup god

%p
  Running this command will generate the executable bootup_god in ~/.rvm/bin or,
  if you have installed RVM system wide, in /usr/local/rvm/bin.

%p
  Thus, when setting up your init files, instead of using the direct path to god, you would
  instead use the path to bootup_god. As an example, you could add the following
  to /etc/rc.local (although we suggest using the init.d system of choice for your
  operating system):

%pre.code
  :preserve
    /home/your-long/.rvm/bin/bootup_god -c /path/to/config.god --log /var/log/god.log --no-syslog --log-level warn

%p
  Also, please note that any gems you reference in your god configurations that are
  under other gemsets or rubies (such as thin or thor), you will need to also generate
  wrapper scripts (and hence, use the path for them) via:

%pre.code
  :preserve
    rvm wrapper ruby@gemset [scope] [binary-name]

%p
  Where [scope] is the prefix for the executable (e.g. god before)
  and binary-name is the binary to generate a wrapper for. Hence, creating
  %tt $rvm_bin_path/[scope]_[binary-name]
  \- e.g. ~/.rvm/bin/myapp_thin

%p
  Lastly, you would replace all calls to 'thin' or the path to 'thin' in your god
  configs with the path to the wrapper instead.
