.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/gemsets/" }
    Gemsets
  &nbsp;>&nbsp;
  %a{ :href => "/gemsets/exporting/" }
    Exporting Gemsets
  %hr

%h2
  Managing gemsets
%p
  You can not only use completely separate gemsets per application/project/etc... you can also export and load them very easily, too.

%p
  To export a gemset, assuming a project called 'albinochipmunk' running on Ruby 1.9.2:
%pre.code
  :preserve
    $ rvm 1.9.2@albinochipmunk do gemset export
%p
  creates an 'albinochipmunk.gems' file.

%p
  Alternatively, if you already have a ruby selected
%pre.code
  :preserve
    rvm gemset export
%p
  creates a 'default.gems' file.

%p
  You can specify the gemset filename prefix, also
%pre.code
  :preserve
    rvm gemset export albinochipmunk.gems

%p
  A subtle difference with the above command is to leave off the '.gems' which will export the gems for the gemset named 'mygemsetname'
  / unclear what happens here. if the example used 'redsquirrel', I'd interpret this as "although gem set albinochipmunk is currently in use, this command will export the not-in-use gem set 'redquirrel', perhaps to the export file 'redsquirrel.gems'"
%pre.code
  :preserve
    rvm gemset export albinochipmunk
